version: '3.8'

services:
  # Backend Service - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: heart-diagnostic-backend-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - JAVA_OPTS=-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication
      - SERVER_PORT=8080
      - LOGGING_LEVEL_ROOT=WARN
      - LOGGING_LEVEL_COM_HEARTDIAGNOSTIC=INFO
    volumes:
      - ./ml-models/exported-models:/app/models:ro
      - backend-logs:/app/logs
    networks:
      - heart-diagnostic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend Service - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: heart-diagnostic-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_API_BASE_URL=https://api.heartdiagnostic.com/api
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - heart-diagnostic-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    container_name: heart-diagnostic-proxy-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - heart-diagnostic-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: heart-diagnostic-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
    networks:
      - heart-diagnostic-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    profiles:
      - cache

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: heart-diagnostic-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - heart-diagnostic-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: heart-diagnostic-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - heart-diagnostic-network
    profiles:
      - monitoring

networks:
  heart-diagnostic-network:
    driver: bridge
    name: heart-diagnostic-network-prod

volumes:
  backend-logs:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local